name: Deploy to Docker Hub 

on:
  push:
    branches: [ deploy ]

jobs:
  build-and-deploy-to-hub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2


      # Build the Docker image
      - name: Build the Docker image
        run: docker build . --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}
        env:
          DOCKER_BUILDKIT: 1


      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }} && docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
      
  deploy-to-server:
    runs-on: ubuntu-latest
    needs: build-and-deploy-to-hub

    steps:
        # SSH and Docker container steps are inside a conditional statement that checks if server is connectable
      - name: Check server connection
        id: ssh_check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          timeout: '60s'
        continue-on-error: true

      - name: Skip if server not connectable
        if: ${{ steps.ssh_check.outcome == 'failure' }}
        run: echo "Skipping SSH and Docker container steps since server is not connectable."

      - name: Copy private key
        if: ${{ steps.ssh_check.outcome == 'success' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

      - name: SSH into Server and run Docker container
        if: ${{ steps.ssh_check.outcome == 'success' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            if docker ps -a | grep -q ${{ secrets.DOCKER_REPOSITORY }}; then docker stop ${{ secrets.DOCKER_REPOSITORY }} || true; fi
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}
            docker run --rm --name ${{ secrets.DOCKER_REPOSITORY }} -d -p 80:8000 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}
  
  send-telegram-notification:
    runs-on: ubuntu-latest
    needs: deploy-to-server

    steps:
      # Sends a Telegram message if there was a connection error
      - name: Send Telegram message on error
        if: ${{ steps.ssh_check.outcome == 'failure' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "There was an error connecting to the server for deployment. Check the server and the workflow"

      # Sends a Telegram message if deployment was successful
      - name: Send Telegram message on success
        if: ${{ steps.ssh_check.outcome == 'success' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Deployment successful! ðŸš€ Build and deploy to Docker Hub And Server is complete."